var tools = module.exports = {}

/**
  * Extending one object with multiple count of another
  */
tools.extend = function (target, source) {
	if (arguments.length < 1) return {}
	if (arguments.length == 1) return arguments[0]

	var target = arguments[0]
		, source
	for (var i = 1, l = arguments.length; l > i; i++) {
		source = arguments[i]
		for (var prop in source) {
			target[prop] = source[prop]
		}
	}

	return target
}

tools.extendProto = function (proto) {
		if ( ! proto.hasOwnProperty('super'))
			proto.super = []

		proto.super.unshift(this)
		return tools.proto(proto)
	}

/**
  * Declarative object creation
  */
tools.proto = function (proto) {
	var constructor
	if (proto.hasOwnProperty('constructor')) {
		constructor = proto.constructor
	} else {
		constructor = function() {}
	}

	if (proto.hasOwnProperty('super')) {
		var superProto = {}
			, mixins = proto.super
			, mixin

		for (var i = mixins.length; i--; ) {
			mixin = mixins[i]

			if (typeof mixin !== "function") {
				throw new Error("Super item should be a function")
			} else {
				// Import prototype properties
				var isCommon
				for (var prop in mixin.prototype) {
					isCommon = mixin.hasOwnProperty(prop) && mixin[prop] == mixin.prototype[prop]
					if (! isCommon) {
						superProto[prop] = mixin.prototype[prop]
					}
				}

				// Import static properties
				var propName
				for (var prop in mixin) {
					if (mixin.prototype.hasOwnProperty(prop) && mixin[prop] === mixin.prototype[prop]) {
						propName = "common " + prop
					} else {
						propName = "static " + prop
					}

					superProto[propName] = mixin[prop]
				}
			}
		}

		for (var prop in proto)
			superProto[prop] = proto[prop]

		proto = superProto
	}

	// Build function from proto declaration
	var value
	for (var prop in proto) {
		value = proto[prop]

		if (prop == 'super' || prop == 'constructor') continue
		
		if (prop.indexOf("common ") === 0) {
			prop = prop.substr(7)
			constructor.prototype[prop] = constructor[prop] = value
		} else if (prop.indexOf("static ") === 0) {
			prop = prop.substr(7)
			constructor[prop] = value
		} else {
			constructor.prototype[prop] = value
		}
	}

	if (! constructor.hasOwnProperty("extend")) {
		constructor.extend = tools.extendProto
	}

	return constructor
}